{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lec 14:  Visualizing Continuous Distributions\n",
    "***\n",
    "\n",
    "We'll need Numpy, Matplotlib, and maybe Pandas for this notebook, so let's load them. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pylab as plt \n",
    "#from scipy.stats import norm\n",
    "import scipy.stats as stats\n",
    "import math\n",
    "import pandas as pd \n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Continuous Uniform Distribution with Python\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the continuous uniform distribution, $X \\sim Uni(a, b)$ the scipy stats module has the following built-in functions:\n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.uniform.html\n",
    "\n",
    " - pdf:  `stats.uniform.pdf(x, a, b-a)`   (This is the probability **Density**. Useful if you want to plot the probability density function). \n",
    "\n",
    " - cdf:  `stats.uniform.cdf(x, a, b-a)`    (Cumulative distribution function, i.e. $P(X \\leq x))$\n",
    "\n",
    " - rvs:`stats.uniform.rvs(a, b-a, size=n )`  Randomly samples from the Uniform Distribution\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1:\n",
    "Suppose the arrival time of the next bus is uniformly distributed between 5 and 9 minutes.  What is the probability your bus arrives between 5 and 8 minutes?\n",
    "\n",
    "Calculate and then sketch and shade what this number represents in terms of the PDF."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**SOLUTION**:\n",
    "\n",
    "By Hand:\n",
    "\n",
    "The PDF for U(5,9) is given by $f(x) = \\frac{1}{9-5}$ for $5\\leq x\\leq 9$\n",
    "\n",
    "Thus \n",
    "$P(5 \\leq X \\leq 8) = \\int_5^8 \\frac{1}{9-5}= \\,dx  = \\frac{1}{4} \\int_5^8 1 \\,dx = \\frac{1}{4} (3) = \\frac{3}{4}$\n",
    "\n",
    "\n",
    "\n",
    "Using Python, using the CDF function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.75"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.uniform.cdf(8, 5, 4)- stats.uniform.cdf(5, 5, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Probability Per Unit x')"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Plot this\n",
    "\n",
    "x = np.linspace(3, 11, 1000)\n",
    "y=stats.uniform.pdf(x,5,4)\n",
    "plt.plot(x, y,\"*\")\n",
    "\n",
    "#Create endpoints of piecewise function;\n",
    "plt.scatter([5],[1/4], color='blue', s=45, zorder=2, edgecolor='blue')\n",
    "plt.scatter([5],[0], color='white', s=45, zorder=2, edgecolor='blue')\n",
    "plt.scatter([9],[1/4], color='blue', s=45, zorder=2, edgecolor='blue')\n",
    "plt.scatter([9],[0], color='white', s=45, zorder=2, edgecolor='blue')\n",
    "\n",
    "\n",
    "plt.title(\"PDF for X~U(5,9)\")\n",
    "\n",
    "labels=[5, 8, 9]\n",
    "plt.xticks(labels)\n",
    "\n",
    "plt.fill_between(x, y, where=[(x > 5) and (x < 8) for x in x], label=\"area=0.75\", alpha=0.4)\n",
    "\n",
    "#place legend where you want it\n",
    "plt.legend(loc=(.26,.4), shadow=True)\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"Probability Per Unit x\")\n",
    "\n",
    "#plt.axhline(color=\"black\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Exponential Distribution with Python\n",
    "***"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Usage note!  Check your documentation!  We have been using the following PDF for the exponential:\n",
    "\n",
    "$$f(x) = \\lambda e^{-\\lambda x} \\text{  for  } x \\in [0, \\infty)$$\n",
    "\n",
    "where $\\lambda$ is the **rate** at which events happen.\n",
    "\n",
    "... but scipy uses a variant that instead has parameter called *scale* that's $1/\\lambda$ instead.  See documentation:\n",
    "\n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.expon.html\n",
    "\n",
    "- A common parameterization for expon is in terms of the rate parameter lambda, such that pdf = lambda * exp(-lambda * x). This parameterization corresponds to using scale = 1 / lambda.\n",
    "\n",
    "They're in the wrong here, but what can we do?  We have to use `scale=1/lambda` for our usage.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Calculating probabilities for an exponential distribution\n",
    "***  \n",
    "\n",
    "### Exercise 2:\n",
    "**In an exponential distribution, let $X$= amount of time (in minutes) a postal clerk spends with a customer.   The time is known from historical data to have an average amount of time equal to four minutes, with parameter λ=0.25.    What is the probability that a clerk spends four to five minutes with a randomly selected customer?!**\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**YOUR SOLUTION (BY HAND) HERE:**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "**Now, let's do this again in Python.**\n",
    "\n",
    "The scipy stats module has the following built-in functions for the exponential distribution:\n",
    "\n",
    " - pdf:  `stats.expon.pdf(x, scale=1/lambda)`\n",
    "\n",
    " - cdf:  `stats.expon.cdf(x, scale=1/lambda)`\n",
    "\n",
    " - ppf: (for finding percentiles):  `stats.expon.ppf(probability, scale=1/lambda)`\n",
    "\n",
    " - rvs:  for randomly sampling from an exponential distribution:  `stats.expon.rvs(samplesize=1000, scale=1/lambda)`\n",
    "\n",
    "\n",
    "\n",
    "Hint:  Use the built-in exponential cdf function: \n",
    "Note that scale = $1/ \\lambda = 1/(1/4) = 4$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Your answer here:\n",
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's visualize this using the graph of the pdf and the `plt.plot` function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'PDF of X~exp(0.25)')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the exponential pdf\n",
    "x = np.linspace(0, 10, 1000)\n",
    "\n",
    "y = ...\n",
    "\n",
    "plt.plot(x,y )\n",
    "#shade the region between x=4 and x=5:\n",
    "plt.fill_between(x, stats.expon.pdf(x, scale=4), where=[(x > 4) and (x < 5) for x in x], label='area is approx 0.08', alpha=0.4)\n",
    "\n",
    "\n",
    "#choose where to position the legend\n",
    "plt.legend(loc=(.60,.6), shadow=True)\n",
    "\n",
    "#add title:\n",
    "plt.title(\"PDF of X~exp(0.25)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The Normal Distribution with Python\n",
    "***\n",
    "The built-in functions for the normal distribution with mean = m and standard deviation = s  are given by are given by:\n",
    "https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html\n",
    "\n",
    "\n",
    " - pdf:  `stats.norm.pdf(x, m, s)`  (This is the probability **Density**. Useful if you want to plot the probability density function). \n",
    "\n",
    " - cdf:  `stats.norm.cdf(x, m, s)`  (Cumulative distribution function, i.e. $P(X \\leq x))$\n",
    " - ppf:`stats.norm.ppf(q, m, s)` (for finding the q*100 percentile) \n",
    "\n",
    " -  rvs: `stats.norm.rvs (m, s, size=n)` or `np.random.normal(m, s, size)`   (to randomly sample from the normal distribution)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "### Exercise 3:\n",
    "Let $X$ be a normal random variable, i.e. $X \\sim N(mean = 2,var = 9)$.  \n",
    "\n",
    "**Part A**: Use scipy.stats.norm to compute\n",
    "\n",
    " - i).  $P(X \\leq 1.25)$ \n",
    "\n",
    " - ii).  $P(X \\geq 4)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(X ≤ 1.25) = 0.401\n",
      "P(X ≥ 4) = 0.252\n",
      "1.0\n"
     ]
    }
   ],
   "source": [
    "# SOLUTION TO PART (i)\n",
    "..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# SOLUTION TO PART (ii)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part B**:  Plot the PDF and shade what your answer above to part (i) represents in terms of the distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'PDF of X~norm(2, 3)')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot the normal distribution\n",
    "x = np.linspace(-10, 10, 1000)\n",
    "y = ...\n",
    "plt.plot(x, y)\n",
    "\n",
    "#shade the region between less than x=1.25\n",
    "plt.fill_between(x, stats.norm.pdf(x, 2, 3), where=[(x < 1.25) for x in x], label='area is approx 0.40', alpha=0.4)\n",
    "\n",
    "\n",
    "#choose where to position the legend\n",
    "plt.legend(loc=(.60,.6), shadow=True)\n",
    "plt.xlabel(\"x\")\n",
    "plt.ylabel(\"Probability Density (i.e prob per unit x)\")\n",
    "\n",
    "#add title:\n",
    "plt.title(\"PDF of X~norm(2, 3)\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4 - Sampling from the Normal Distribution with Python \n",
    "*** \n",
    "\n",
    "**Part A**: Draw at least $10000$ samples from the distribution $N(0,1)$ and store the results in a variable called $z$.  Make a density histogram of $z$. Set the $x$-limits for your plot to $[-10,10]$ and your $y$-limits to $[0,0.5]$ so we can compare with the plots we'll generate in **Parts B-D**."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAlkAAAD8CAYAAABEtrEzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAWOUlEQVR4nO3df5Dcd33f8ecrdz6DCeQIjot7coJoZSealCJjZNIQIBhi2Was0JBUND9IE0ZjZkwgHabYde0mo2mLk/5IMnGjUcFN0yS4JGAqsDIy0BLSaQwytmwsGxNhIBYCTEgvyOPE4sS7f+xXdHs+6fZO+9m7vXs+Zm60393v7evzPe3uve7z/e53U1VIkiRpuL5tpQcgSZK0FlmyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqYGBSlaSbUkeTnI4yXUL3P6KJH+V5GD3ddPwhypJkjQ+JhdbIckEcAvwauAIcCDJ3qp6cN6qf1JVr2kwRkmSpLEzyEzWVuBwVT1SVceB24DtbYclSZI03hadyQJmgEf7lo8Aly6w3g8kuQ84Crytqg7NXyHJTmAnwDnnnPOiCy+8cOkjXqYTJ04wMTFhnnnrPm8tb5t55pm3cnlredsADh48+BdV9V1L+Z5BSlYWuG7+Z/HcA3xPVT2e5Erg/cCmp3xT1R5gD8CWLVvq3nvvXcpYz8js7CzT09Pmmbfu89bytplnnnkrl7eWtw0gyReW+j2D7C48AlzQt7yB3mzVt1TV16vq8e7yPuCsJOcudTCSJElrxSAl6wCwKcnGJFPADmBv/wpJnpsk3eWt3f1+bdiDlSRJGheL7i6sqrkk1wL7gQng1qo6lOSa7vbdwOuANyWZA/4a2FFV83cpSpIkrRuDHJN1chfgvnnX7e67/JvAbw53aJIkSePLM75LkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqQFLliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDVgyZIkSWrAkiVJktSAJUuSJKkBS5YkSVIDlixJkqQGLFmSJEkNWLIkSZIasGRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1MBAJSvJtiQPJzmc5LrTrPfiJCeSvG54Q5QkSRo/i5asJBPALcAVwGbg9Uk2n2K9m4H9wx6kJEnSuBlkJmsrcLiqHqmq48BtwPYF1nsz8F7gsSGOT5IkaSxNDrDODPBo3/IR4NL+FZLMAK8FXgm8+FR3lGQnsBNgZmaG2dnZJQ53+Y4dOzayLPPMW815a3nbzDPPvJXLW8vbtlyDlKwscF3NW/414O1VdSJZaPXum6r2AHsAtmzZUtPT04ONckjMM8+80WeZZ5556ydvLW/bcgxSso4AF/QtbwCOzlvnEuC2rmCdC1yZZK6q3j+MQUqSJI2bQUrWAWBTko3AF4EdwD/uX6GqNp68nOS3gQ9asCRJ0nq2aMmqqrkk19J71+AEcGtVHUpyTXf77sZjlCRJGjuDzGRRVfuAffOuW7BcVdXPnvmwJGkwx+dOMDU58a3l0x2jMX9dSWppoJIlSavV1OQEl++6Y6B19994VePRSNL/48fqSJIkNWDJkrTqHJ87sdJDkKQz5u5CSauOuwAlrQXOZEmSJDVgyZIkSWrAkiVJktSAJUvSurGUA+o9+F7SmfLAd0nrhgfUSxolZ7IkSZIasGRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqQFLliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDVgyZIkSWrAkiVJktSAJUuSJKkBS5YkSVIDlixJkqQGLFmSRub43ImVHoIkjczkSg9A0voxNTnB5bvuWHS9/TdeNYLRSFJbA81kJdmW5OEkh5Nct8Dt25Pcn+RgkruTvHT4Q5UkSRofi85kJZkAbgFeDRwBDiTZW1UP9q32EWBvVVWSFwDvAb63xYAlSZLGwSAzWVuBw1X1SFUdB24DtvevUFWPV1V1i88ACkmSpHVskGOyZoBH+5aPAJfOXynJa4F/A5wHLHhARZKdwE6AmZkZZmdnlzjc5Tt27NjIsswzbzXnreS2TU9PjzT7TA3yGrWWHyvmmbdas1YibzkGKVlZ4LqnzFRV1e3A7UleBuwCXrXAOnuAPQBbtmypUb/gmmeeeaPPWom8YRl03Gv952meeasxayXylmqQ3YVHgAv6ljcAR0+1clV9DPg7Sc49w7FJkiSNrUFK1gFgU5KNSaaAHcDe/hWS/N0k6S5fDEwBXxv2YCVJksbForsLq2ouybXAfmACuLWqDiW5prt9N/BjwM8k+Qbw18A/6jsQXpIkad0Z6GSkVbUP2Dfvut19l28Gbh7u0CRJksaXH6sjSZLUgCVLkiSpAUuWJC1g0A+znp6e9oOvJS3ID4iWpAUM+mHW4AdaS1qYM1mSJEkNWLIkSZIasGRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqQFLliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDVgyZIkSWrAkiVJktSAJUuSJKkBS5YkSVIDlixJkqQGLFmSJEkNWLIkSZIasGRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWpDNyfO7EaW+fnp4ezUAkaZWZHGSlJNuAXwcmgHdW1Tvm3f6TwNu7xceBN1XVfcMcqKTVaWpygst33THQuvtvvKrxaCRp9Vh0JivJBHALcAWwGXh9ks3zVvsc8PKqegGwC9gz7IFKkiSNk0F2F24FDlfVI1V1HLgN2N6/QlX976r6P93iXcCG4Q5TkiRpvAyyu3AGeLRv+Qhw6WnW/3ngjxa6IclOYCfAzMwMs7Ozg41yCI4dOzayLPPMW815w87ymKvecWlTkxMDrfs3x+f4myceX3bWWn5smjfeeWt525ZrkJKVBa6rBVdMfpheyXrpQrdX1R66XYlbtmypUb84m2eeeaPPWg+Welza06amzyhvLT82zRvvvLW8bcsxSMk6AlzQt7wBODp/pSQvAN4JXFFVXxvO8CRJksbTIMdkHQA2JdmYZArYAeztXyHJdwPvA366qj4z/GFKkiSNl0VnsqpqLsm1wH56p3C4taoOJbmmu303cBPwHOA/JgGYq6pL2g1bkiRpdRvoPFlVtQ/YN++63X2X3wi8cbhDkyRJGl+e8V2SJKkBS5YkSVIDlixJkqQGLFmSJEkNWLIkSZIasGRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqQFLliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDVgyZIkSWrAkiVJktSAJUuSJKkBS5akpzg+d2KlhyBJY29ypQcgafWZmpzg8l13DLTu/huvajwaSRpPzmRJkiQ1YMmSJElqwJIlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDQxUspJsS/JwksNJrlvg9u9N8qdJnkzytuEPU5LWhqWc6NWTwkrjbdGTkSaZAG4BXg0cAQ4k2VtVD/at9pfALwA/2mKQkrRWeKJXaf0YZCZrK3C4qh6pquPAbcD2/hWq6rGqOgB8o8EYJUmSxs4gH6szAzzat3wEuHQ5YUl2AjsBZmZmmJ2dXc7dLMuxY8dGlmWeeas5b5Cs6enp9gPRQOa/Tq7lx6Z54523lrdtuQYpWVngulpOWFXtAfYAbNmypUb9Qm6eeeaNPktnZqH/q7X82DRvvPPW8rYtxyC7C48AF/QtbwCOthmOJEnS2jBIyToAbEqyMckUsAPY23ZYkiRJ423R3YVVNZfkWmA/MAHcWlWHklzT3b47yXOBu4FnAd9M8lZgc1V9vd3QJUmSVq9BjsmiqvYB++Zdt7vv8pfp7UaUJEkSnvFdkiSpCUuWJElSA5YsSZKkBixZkiRJDViyJEmSGrBkSZIkNWDJkiRJasCSJUmS1IAlS5IkqQFLliRJUgOWLGmdOD53AoDp6emVHYgkrRMDfXahpPE3NTnB5bvuGGjd/Tde1Xg0krT2OZMlSZLUgCVLkiSpAUuWJElSA5YsSZKkBixZkiRJDViyJGmVOnnajX4LnYJjofUkrTxP4SBJq9Sgp93wlBvS6uRMliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDVgyZIkSWrAkiVJktSAJUsaY56EUpJWL09GKo2xQU9WCZ6wUpJGzZksSRpzS5nRdPZTGh1nsiRpzDmjKa1OzmRJkiQ1YMmSJElqwJIlSZLUgCVLWmU8MFkteZC8NDoe+C6tMh7ErJaW+vh6ovF4pLVsoJmsJNuSPJzkcJLrFrg9SX6ju/3+JBcPf6iSJEnjY9GSlWQCuAW4AtgMvD7J5nmrXQFs6r52Ar815HFKY22x3S7T09OjGYi0BMfnTgz82HTXovRUg+wu3AocrqpHAJLcBmwHHuxbZzvwO1VVwF1JppOcX1VfGvqIpcaW8ovlyW+c4OyzJhZdz12AGkdLedx+4PptA9/v8bkTTE0u/ryRxl16veg0KySvA7ZV1Ru75Z8GLq2qa/vW+SDwjqr6X93yR4C3V9Xd8+5rJ72ZLoDvBx4Y1oYM4FzgL8wzz7w1vW3mmWfeyuWt5W0DuKiqnrmUbxhkJisLXDe/mQ2yDlW1B9gDkOTuqrpkgPyhMM8880afZZ555q2fvLW8bSfzlvo9gxz4fgS4oG95A3B0GetIkiStG4OUrAPApiQbk0wBO4C989bZC/xM9y7DlwB/5fFYkiRpPVt0d2FVzSW5FtgPTAC3VtWhJNd0t+8G9gFXAoeBJ4B/MkD2nmWPennMM8+80WeZZ5556ydvLW/bsvIWPfBdkiRJS+fH6kiSJDVgyZIkSWpg5CUryY8nOZTkm0kumXfb9d1H8zyc5PIG2X8/yZ8m+VSSDyR51rAz5uW9MMldSQ4muTvJ1sZ5/63LOpjk80kOtszrMt/c/X8dSvIrDXN+KckX+7bvylZZ83LflqSSnNs4Z1f3kVQHk9yZ5G83zvvVJJ/uMm9PMt0475TP+yHnnPYjwIacdWuSx5KM5Hx/SS5I8j+TPNT9LN/SMOtpST6R5L4u65dbZc3LnUhyb3fuxdZZn+9+Fxxczlvzl5E3neQPu+fdQ0l+oGHWRX2vlQeTfD3JW1vldZm/2D1WHkjy7iRPa5z3li7rUIttW+j5neQ7k3woyZ91/z570TuqqpF+Ad8HXAR8FLik7/rNwH3A2cBG4LPAxJCzDwAv7y7/HLCr8bbeCVzRXb4S+OgIf87/DripccYPAx8Gzu6Wz2uY9UvA20b18+syL6D3ho8vAOc2znpW3+VfAHY3zvsRYLK7fDNwc+O8BZ/3Q86Y6F43ng9Mda8nmxtu08uAi4EHWv7s+vLOBy7uLj8T+Eyr7aN37sNv7y6fBXwceMkItvGfAr8PfHAEWZ9v/byel/dfgDd2l6eA6RHlTgBfBr6nYcYM8Dng6d3ye4CfbZh38mTm59B7A9+HgU1DznjK8xv4FeC67vJ1g7xujnwmq6oeqqqHF7hpO3BbVT1ZVZ+j907FYc/8XAR8rLv8IeDHhnz/8xVwcrbsOxjRucOSBPgJ4N2No95E70z/TwJU1WON80btPwD/jAVOrDtsVfX1vsVntM6sqjuraq5bvIveue1a5p3qeT9M3/oIsKo6Dpz8CLAmqupjwF+2uv8F8r5UVfd0l48BD9H75dYiq6rq8W7xrO6r6WMyyQbgKuCdLXNWQrfX5GXAuwCq6nhVzY4o/jLgs1X1hcY5k8DTk0zSKz8tf999H3BXVT3RvY79MfDaYQac4vm9nV5Zpvv3Rxe7n9V0TNYM8Gjf8hGG/wLyAHB1d/nH+f9PoNrCW4FfTfIo8G+B6xvnnfRDwFeq6s8a51wI/FCSjyf54yQvbpx3bbd769aBpmnPQJKrgS9W1X0tc+Zl/qvusfKTwE2jyqU3q/tHI8xrZRSvIatCkucBW+jNMLXKmOgOOXgM+FBVNcvq/Bq9P2q+2TjnpALuTPLJ9D7yraXnA18F/nO3O/SdSZ7ROPOkHTT+g7uqvkjvd9yfA1+id67MOxtGPgC8LMlzkpxDb09R69/nAH+runOAdv+et9g3DPKxOkuW5MPAcxe46Yaq+u+n+rYFrlvyX06ny6b3y+Q3ktxE7wSqx5d6/0vMuwz4xap6b5KfoPdXzKta5fX9bF/PkJ5Ui2zfJPBs4CXAi4H3JHl+dXOpQ876LWAXvcfELnq7Q39uOTkD5v1zervUhmax/7uqugG4Icn1wLXAv2yZ161zAzAH/N6ZZA2a19hQXkNWuyTfDrwXeOu8GdChqqoTwAu74/VuT/L9VdXk+LMkrwEeq6pPJnlFi4wF/GBVHU1yHvChJJ/uZi9amKS36+nNVfXxJL9Ob3fTjY3yAEjvBOJX0/gP/O6P3u30DvWZBf4gyU9V1e+2yKuqh5LcTG+P1OP0Dg2YO/13rYwmJauqllMkhvLRPANk/whAkgvpTU2fkdPlJfkd4OTBqX/AEKbBF9u+bqr2HwIvOtOsxfKSvAl4X1eqPpHkm/Q+sPOrw86al/ufgDM+MPZUeUn+Hr0Xi/t6e17ZANyTZGtVfXnYeQv4feAOzrBkDfBYeQPwGuCy5RbjpeSNwJr/eK8kZ9ErWL9XVe8bRWZVzSb5KLCN3gxCCz8IXJ3eG1qeBjwrye9W1U81yqOqjnb/Ppbkdnq7m1uVrCPAkb7ZwD+kV7JauwK4p6q+0jjnVcDnquqrAEneB/wDoEnJAqiqd9Htfk3yr+n9jFv7SpLzq+pLSc6nN8t7Wqtpd+FeYEeSs5NsBDYBnxhmQPcXC0m+DfgXwO5h3v8CjgIv7y6/Emi9+w56D/ZPV9UoHnDvp7ddJ0vrFI0+Eb17QJ/0Wtq92FNVn6qq86rqeVX1PHpP3ovPpGAtJsmmvsWrgU+3yurytgFvB66uqidaZo3QIB8BNra6Yy3fBTxUVf++cdZ3dTNYJHk63etKq7yqur6qNnTPtx3A/2hZsJI8I8kzT16m98d3y9eULwOPJrmou+oy4MFWeX2GtldjEX8OvCTJOd3j9DJ6xww20/f7/LvpTSyMYjv3Am/oLr8BWHyGfphH4w/yRe8X5BHgSeArwP6+226g9+6gh+nelTfk7LfQe0fOZ4B30J3xvuG2vhT4JL2pzI8DLxrBz/e3gWtG9H85Re8vlQeAe4BXNsz6r8CngPu7B/r5o9jGLvvztH934Xu7n+P9wAeAmcZ5h+kdv3Sw+2r9bsZTPu+HnHNl9/z+LL3dlC236d30jj/5RrdtP98476X0dn/e3/f/dmWjrBcA93ZZD9D4ncrzsl9B43cX0jtG6r7u61Drx0qX+ULg7u5n+n7g2Y3zzgG+BnzHiP7ffpleEX+ge70+u3Hen9ArqvfRm40f9v0/5fkNPAf4CL0Jk48A37nY/fixOpIkSQ2spt2FkiRJa4YlS5IkqQFLliRJUgOWLEmSpAYsWZIkSQ1YsiRJkhqwZEmSJDXwfwHIM9HKY1Q6UgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "z = ...\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(10,4))\n",
    "   #initialize the axis and frame for your picture\n",
    "pd.Series(z).hist(ax=ax, bins=20, color=\"steelblue\", density=True, edgecolor=\"white\")\n",
    "   # histogram of the one-dimensional array that contains the 1000 elements in z\n",
    "ax.grid(alpha=0.25)\n",
    "ax.set_axisbelow(True)\n",
    "plt.xticks(range(-10,10+1));\n",
    "ax.set_xlim([-10,10])\n",
    "ax.set_ylim([0,.5]);\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part B**: Look back at the documentation from your function for generating samples from $N(0,1)$.  Modify your code (copy-paste) from **Part A** to draw samples from a normal distribution with parameters $\\mu=3$ and $\\sigma^2 = 4$, i.e. $N(3,4)$, and store the results in a variable called $x$. Make a density histogram with the same axes limits.  Does your picture seem right based on the changes to the parameters of the distribution? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mu = 3\n",
    "sigma = 2\n",
    "\n",
    "x = ...\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(10,4))\n",
    "\n",
    "pd.Series(x).hist(ax=ax,bins=20,facecolor = \"seagreen\",edgecolor=\"white\",density=True)\n",
    "\n",
    "ax.set_xlim([-10,10])\n",
    "ax.set_ylim([0,0.5]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part C**: Now suppose we are only able to sample from $N(0,1)$.  Could we take those samples and perform a simple transformation so that they're samples from $N(3,4)$? Try a few basic transformations on your array $z$ from **Part A** and store the results in a variable $y$.  Then make a density histogram of $y$ with the same axes limits (again, copy-paste).  Does your histogram based on the transformed data look like the histogram from **Part B**?  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Using the sample from part A above (this is called z)\n",
    "y = 2*z+3\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(10,4))\n",
    "\n",
    "pd.Series(y).hist(ax=ax,bins=20,facecolor = \"seagreen\",edgecolor=\"white\",density=True)\n",
    "\n",
    "ax.set_xlim([-10,10])\n",
    "ax.set_ylim([0,0.5]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part D**: Okey dokey, going from $N(0,1)$ to $N(3,4)$ was the easy direction, but can you go back the other way.  Can you take the $N(3,4)$ samples you have stored in $v$ from **Part B** and transform them into samples from $N(0,1)$?  Try a few transformations and store them in a variable called $v$ and make a density histogram of your transformed data . Does it look like the plot of sampled $N(0,1)$ data from **Part A**? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "v = (x-3)/2\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(10,4))\n",
    "\n",
    "pd.Series(v).hist(ax=ax,bins=20,facecolor = \"seagreen\",edgecolor=\"white\",density=True)\n",
    "\n",
    "ax.set_xlim([-10,10])\n",
    "ax.set_ylim([0,0.5]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part E**: Next let's overlay the density function for $N(3,4)$ over our histogram and check that everything looks good.  Look up the documentation for Scipy.stats's [normal random variable](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.norm.html). The object scipy.stats.norm implements all kinds of cool functions related to the normal distribution, including: pdf, cdf and ppf.  Use the scipy.stats.norm pdf function to plot a density function overlay over your histogram from **Part B**. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f97903a5eb0>]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "u = np.random.normal(3, 2, size=10000)\n",
    "\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1,figsize=(10,4))\n",
    "\n",
    "pd.Series(u).hist(ax=ax,bins=20,facecolor = \"seagreen\",edgecolor=\"white\",density=True)\n",
    "\n",
    "ax.set_xlim([-10,10])\n",
    "ax.set_ylim([0,0.5]);\n",
    "\n",
    "x = np.linspace(-10,10,500)\n",
    "f = stats.norm.pdf(x,3,2)\n",
    "ax.plot(x,f,color=\"blue\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5  - Standard Deviations and Grading Curves\n",
    "*** \n",
    "\n",
    "The following picture depicts the much-often spouted facts in statistics classes that roughly $68\\%$ of the probability for a normal distribution falls within 1 standard deviation of the mean, roughly $95\\%$ falls within two standard deviations of the mean, etc \n",
    "\n",
    "![alt text](https://upload.wikimedia.org/wikipedia/commons/thumb/8/8c/Standard_deviation_diagram.svg/400px-Standard_deviation_diagram.svg.png)\n",
    "\n",
    "\n",
    "**Part A**: Verify the first fact, that roughly $68\\%$ of the probability in the standard normal distribution falls between $\\mu-\\sigma = -1$ and $\\mu+\\sigma = 1$. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**: Let $Z$ be a random variable with standard normal distribution $N(0,1)$.  We have "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(-1 ≤ Z ≤ 1) = 0.6827\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that for convenience, we used the standard normal distribution here.\n",
    "<br>But $\\color{red}{\\text{this relationship holds for any normal distribution}}$.  For instance, if we let $X$ be a normal distribution with mean $\\mu = 3$ and standard deviation $\\sigma = 2$, then we should be able to check the probability $P(3-2 \\leq X \\leq 3+2) = P(1 \\leq X \\leq 5)$ and get the same result.  Let's check: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(1 ≤ X ≤ 5) = 0.6827\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part B**: Verify the second fact, that roughly $95\\%$ of the probability in the standard normal distribution falls between $\\mu-2\\sigma = -2$ and $\\mu+2\\sigma = 2$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(-2 ≤ Z ≤ 2) = 0.9545\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similarly, we should obtain the same result for $N(3,4)$ if we compute $P(3-2\\cdot 2 \\leq X \\leq 3+2\\cdot 2) = P(-1 \\leq X \\leq 7)$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(-1 ≤ X ≤ 7) = 0.9545\n",
      "P(-1 ≤ X ≤ 7) = 0.9545\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part C**: Suppose you have grades from a Calculus exam that roughly follow a normal distribution with mean $70$ and standard deviation $15$.  What percentage of the students earned C's and B's (count things like $C$-'s and $B$+'s as $C$'s and $B$'s, etc.)?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(70 ≤ X ≤ 90) = 0.4088\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part D**: A common curving scheme in university courses is to set the Pass mark of a class at $\\mu - 1.5\\sigma$.  That is, if the overall mean of the course is low, instead of holding back people with grades of $69$ or lower, professors will lower the cutoff point to $\\mu - 1.5\\sigma$.  (Of course, if the mean of the course is higher than usual we don't apply this rule, because we're not monsters). If the grades at the end of a course roughly follow a normal distribution with mean $70$ and standard deviation $15$, what is the cutoff point for passing the class?  What percentage of students will pass the class?  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**: We have "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fail/pass mark = mean - 1.5 x stddev = 47.50\n",
      "P(X ≥ mean - 1.5 x stddev) = 0.93\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "SOLUTION:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part E**: Repeat the calculations you did in **Parts C** and **E** by first transforming to a standard normal distribution. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**: For **Part C** we convert the endpoints of $70$ and $90$ to their standard normal equivalents of \n",
    "\n",
    "$$\n",
    "70 \\rightarrow \\frac{70-70}{15} = 0 \\quad \\textrm{and} \\quad 90 \\rightarrow \\frac{90-70}{15} = \\frac{4}{3}\n",
    "$$\n",
    "\n",
    "We then have "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(0 ≤ Z ≤ 4/3) = 0.4088\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**: For **Part D** we convert the left endpoint of $70-1.5 \\times 15$ to \n",
    "\n",
    "$$\n",
    "70 - 1.5 \\times 15 \\rightarrow \\frac{(70-1.5 \\times 15) - 70}{15} = -1.5 \\quad \\textrm{(Is that result mildly obvious?)}\n",
    "$$\n",
    "\n",
    "We then have "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P(X ≥ - 1.5 ) = 0.93\n"
     ]
    }
   ],
   "source": [
    "..."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6 - Sampling from the Standard Normal with Box-Muller \n",
    "*** \n",
    "\n",
    "If you have to draw samples from a normal distribution in a non-prototyping language you might have to roll your own.  Most languages provide a method for sampling from the uniform distribution $U[0,1]$. In C++, for instance, you can generate draws from $U[0,1]$ as follows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#include <stdlib.h>\n",
    "\n",
    "double uniformZeroOne()\n",
    "{\n",
    "    return rand() / (RAND_MAX + 1.);\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The so-called [Box-Muller Transformation](https://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform) can be used to take random draws from $U[0,1]$ and produce random draws from $N(0,1)$. Look at the Wiki page for Box-Muller and then see if you can implement it.\n",
    "\n",
    "**Part A**: Write a function box_muller with argument size that implements the Box-Muller transformation by sampling from values in $U[0,1]$ and returns size samples from $N(0,1)$. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "def box_muller(size):\n",
    "    u1 = np.random.uniform(size=int(size/2))\n",
    "    u2 = np.random.uniform(size=int(size/2))\n",
    "    z1 = np.sqrt(-2*np.log(u1))*np.cos(2*np.pi*u2)\n",
    "    z2 = np.sqrt(-2*np.log(u1))*np.sin(2*np.pi*u2)\n",
    "    return np.concatenate((z1, z2))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Part B**: Use your function from **Part A** to draw at least 10000 samples from $N(0,1)$ and make a histogram. Then use norm.pdf to overlay the standard normal density curve over your histogram and check your work. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "z = box_muller(size=50000)\n",
    "fig, ax = plt.subplots(nrows=1, ncols=1, figsize=(10,4))\n",
    "pd.Series(z).hist(ax=ax, bins=40, color=\"steelblue\", density=True, edgecolor=\"white\")\n",
    "ax.grid(alpha=0.25)\n",
    "ax.set_axisbelow(True)\n",
    "ax.set_xlim([-5,5])\n",
    "ax.set_ylim([0,.5])\n",
    "x = np.linspace(-5,5,100)\n",
    "f = stats.norm.pdf(x)\n",
    "ax.plot(x, f, color=\"green\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def shoulda_taken_the_bus(p=.25):\n",
    "    x = 0 \n",
    "    y=np.array([1,2,3,4,5])\n",
    "    for i in y:\n",
    "        print(i)\n",
    "        if np.random.choice([0,1], p=[1-p, p]) == 0:\n",
    "            x += 1 \n",
    "    return x \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9331927987311419"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.norm.cdf(1.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.1603538377468886"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-stats.f.cdf(2, 3, 14)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.04978706836786395"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "1-stats.chi2.cdf(6,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2514288950953102"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.norm.cdf(3.66, loc=5, scale=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.690112563242383"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats.norm.cdf(9,3,2)-stats.norm.cdf(2,3,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(p=.25):\n",
    "    x=0\n",
    "    y=np.array([1,2,3,4,5])\n",
    "    for i in y:\n",
    "        if np.random.choice([0,1],p=[1-p,p])==0:\n",
    "            x+=1\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "func()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "output = np.array([func() for ii in range(100000)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "series = pd.Series(output) \n",
    "#print(series)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "series.hist(bins=[0,1,2,3,4,5,6])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
